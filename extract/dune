(coq.extraction
 (prelude Extract)
 (extracted_modules 
  BinNums BinPos Datatypes Specif  List0 String0 Bool0 Common Nat0
  base Basics BinInt strings0 zmap pmap fin_maps numbers option0
  Byte CoqUtil CoqBigInt LocTy ssrbool path Monads
  extmap extset CoqWstdlib CoqWeakhtbl CoqHashtbl hashcons NumberDefs
  NumberFuncs State CoqCtr PmapExtra
  IntFuncs 
  CoqExthtbl
  ConstantDefs
  IdentDefs
  TyDefs TyFuncs TermDefs TermFuncs DeclDefs DeclFuncs CoercionDefs 
  TheoryDefs TheoryFuncs TaskDefs TaskFuncs TransDefs
  EliminateInductive EliminateDefinition
  PatternComp)
 (theories Src stdpp Proofs ExtLib mathcomp.ssreflect elpi HB)
 )

;bad hack because we DONT want the autogenerated .mli file
;and the OCaml inferred type has problems with weak references
 ;TODO: can we make polymorphic?
(rule
  (deps CoqExthtbl.ml)
  (targets Exthtbl2.ml)
  (action
    (with-stdout-to Exthtbl2.ml
      (pipe-stdout
        (cat CoqExthtbl.ml)
        (run sed -e "s/let hash_ref =/let hash_ref : t ref =/g")
      )
    )))

;create Loc.ml (only for testing)
 (rule
  (deps LocTy.ml LocExtra.ml)
  (targets loc.ml)
  (action 
  (with-stdout-to loc.ml
    (pipe-stdout
     (cat locpre.ml LocTy.ml LocExtra.ml)
     (run sed -e "s/open LocTy//g")
    )
   )
  )
 )

;create Weakhtbl.ml (only for testing)
(rule
  (deps CoqWeakhtbl.ml Weakhtblextra.ml)
  (targets weakhtbl.ml)
  (action 
  (with-stdout-to weakhtbl.ml
    (pipe-stdout
     (cat CoqWeakhtbl.ml Weakhtblextra.ml)
     (run sed -e "s/open CoqWeakhtbl//g")
    )
   )
  )
 )

;create Wstdlib.ml (only for testing)
(rule
  (deps CoqWstdlib.ml Wstdlibextra.ml)
  (targets wstdlib.ml)
  (action 
  (with-stdout-to wstdlib.ml
    (pipe-stdout
     (cat CoqWstdlib.ml Wstdlibextra.ml)
     (run sed -e "s/open CoqWstdlib//g")
     (run sed -e "s/open CoqWeakhtbl/open Weakhtbl/g")
    )
   )
  )
 )

;create Ctr.ml (TODO: need better method for extract + hand-written .mli files)
(rule
  (deps CoqCtr.ml)
  (targets Ctr.ml)
  (action
    (with-stdout-to Ctr.ml
        (cat CoqCtr.ml)
    )))

;create Number.ml
 (rule
  (deps NumberImports.ml NumberDefs.ml numberexn.ml NumberFuncs.ml numberextra.ml)
  (targets number.ml)
  (action 
  (with-stdout-to number.ml
    (pipe-stdout
     (cat NumberDefs.ml numberexn.ml NumberFuncs.ml numberextra.ml)
     (run sed -e "s/^open.*//g")
     (run cat NumberImports.ml -)
    )
   )
  )
 )

;create Ident.ml
 (rule
  (deps IdentImports.ml IdentDefs.ml IdentExtra.ml)
  (targets ident.ml)
  (action 
  (with-stdout-to ident.ml
    (pipe-stdout
     (cat IdentDefs.ml IdentExtra.ml)
     (run sed -e "s/^open.*//g")
     (run cat IdentImports.ml -)
    )
   )
  )
 )

;Create Ty.ml by concatenation Defs, Exn, Funcs
 (rule
  (deps TyImports.ml TyDefs.ml TyExn.ml TyFuncs.ml TyExtra.ml)
  (targets ty.ml)
  (action 
  (with-stdout-to ty.ml
    (pipe-stdout
     (cat TyDefs.ml TyExn.ml TyFuncs.ml TyExtra.ml)
     (run sed -e "s/^open.*//g")
     (run cat TyImports.ml -)
    )
   )
  )
 )

 ;Create constant.ml
 (rule
  (deps ConstantImports.ml ConstantDefs.ml ConstantExtra.ml)
  (targets constant.ml)
  (action 
  (with-stdout-to constant.ml
    (pipe-stdout
     (cat ConstantDefs.ml ConstantExtra.ml)
     (run sed -e "s/^open.*//g")
     (run cat ConstantImports.ml -)
    )
   )
  )
 )

 ;Create term.ml
 (rule
  (deps TermImports.ml TermDefs.ml TermExn.ml TermFuncs.ml TermExtra.ml)
  (targets term.ml)
  (action 
  (with-stdout-to term.ml
    (pipe-stdout
     (cat TermDefs.ml TermExn.ml TermFuncs.ml TermExtra.ml)
     (run sed -e "s/^open.*//g")
     (run cat TermImports.ml -)
    )
   )
  )
 )

 ;Create decl.ml
 (rule
  (deps DeclImports.ml DeclDefs.ml DeclExn.ml DeclFuncs.ml DeclExtra.ml)
  (targets decl.ml)
  (action 
  (with-stdout-to decl.ml
    (pipe-stdout
     (cat DeclDefs.ml DeclExn.ml DeclFuncs.ml DeclExtra.ml)
     (run sed -e "s/^open.*//g")
     (run cat DeclImports.ml -)
    )
   )
  )
 )

;Coercion.ml
(rule
  (deps CoercionImports.ml CoercionDefs.ml CoercionExtra.ml)
  (targets coercion.ml)
  (action 
  (with-stdout-to coercion.ml
    (pipe-stdout
     (cat CoercionDefs.ml CoercionExtra.ml)
     (run sed -e "s/^open.*//g")
     (run cat CoercionImports.ml -)
    )
   )
  )
 )

;Theory.ml
(rule
  (deps TheoryImports.ml TheoryDefs.ml TheoryExn.ml TheoryFuncs.ml TheoryExtra.ml)
  (targets theory.ml)
  (action 
  (with-stdout-to theory.ml
    (pipe-stdout
     (cat TheoryDefs.ml TheoryExn.ml TheoryFuncs.ml TheoryExtra.ml)
     (run sed -e "s/^open.*//g")
     (run cat TheoryImports.ml -)
    )
   )
  )
 )

;Task.ml
(rule
  (deps TaskImports.ml TaskDefs.ml TaskExn.ml TaskFuncs.ml TaskExtra.ml)
  (targets task.ml)
  (action 
  (with-stdout-to task.ml
    (pipe-stdout
     (cat TaskDefs.ml TaskExn.ml TaskFuncs.ml TaskExtra.ml)
     (run sed -e "s/^open.*//g")
     (run cat TaskImports.ml -)
    )
   )
  )
 )

;Trans.ml
(rule
  (deps TransImports.ml TransDefs.ml TransExtra.ml)
  (targets trans.ml)
  (action 
  (with-stdout-to trans.ml
    (pipe-stdout
     (cat TransDefs.ml TransExtra.ml)
     (run sed -e "s/^open.*//g")
    (run cat TransImports.ml -)
    )
   )
  )
 )

;eliminate_inductive
 (rule
  (deps EliminateInductiveImports.ml EliminateInductive.ml EliminateInductiveExtra.ml)
  (targets eliminate_inductive.ml)
  (action 
  (with-stdout-to eliminate_inductive.ml
    (pipe-stdout
     (cat EliminateInductive.ml EliminateInductiveExtra.ml)
     (run sed -e "s/^open.*//g")
     (run cat EliminateInductiveImports.ml -)
    )
   )
  )
 )

;eliminate_definition
 (rule
  (deps EliminateDefinitionImports.ml EliminateDefinition.ml EliminateDefinitionExtra.ml)
  (targets eliminate_definition.ml)
  (action 
  (with-stdout-to eliminate_definition.ml
    (pipe-stdout
     (cat EliminateDefinition.ml EliminateDefinitionExtra.ml)
     (run sed -e "s/^open.*//g")
     (run cat EliminateDefinitionImports.ml -)
    )
   )
  )
 )

; pattern comp
 (rule
  (deps PatternImports.ml PatternExn.ml PatternComp.ml PatternExtra.ml)
  (targets pattern.ml)
  (action 
  (with-stdout-to pattern.ml
    (pipe-stdout
     (cat PatternExn.ml PatternComp.ml PatternExtra.ml)
     (run sed -e "s/^open.*//g")
     (run cat PatternImports.ml -)
    )
   )
  )
 )

(library
 (name Why3Coq)
 (modules (:standard \ CoqCtr TyExn TyDefs TyFuncs TyExtra IdentDefs IdentExtra 
  LocTy LocExtra Locpre CoqWstdlib Wstdlibextra CoqWeakhtbl Weakhtblextra
  NumberDefs numberexn NumberFuncs numberextra CoqExthtbl ConstantDefs 
  ConstantExtra TermDefs TermExtra TermExn TermFuncs DeclDefs 
  DeclExn DeclFuncs DeclExtra CoercionDefs CoercionExtra TheoryDefs
  TheoryFuncs TheoryExn TheoryExtra
  TaskDefs TaskExn TaskExtra TaskFuncs TransDefs TransExtra
  EliminateInductive EliminateInductiveExtra
  EliminateDefinition EliminateDefinitionExtra
  PatternImports PatternExn PatternComp PatternExtra))
 (flags (:standard -w -33 -w -32 -w -9 -w -27 -w -34)) 
 ;32 is unused value - extraction results in values we don't want in mli file
 ;27 is unused var strict - TODO turn off after
 ;34 is unused type declaration - TODO remove, need for hack in decl
 (libraries zarith sexplib re))


